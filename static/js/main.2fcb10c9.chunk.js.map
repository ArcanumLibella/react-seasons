{"version":3,"sources":["components/SeasonDisplay.js","components/Spinner.js","App.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","appWrapper","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAWMA,EAAe,CACnBC,OAAQ,CACNC,KAAM,0BACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,uBACNC,SAAU,cAIC,SAASE,EAAeC,GACrC,IApBiBC,EAAKC,EAoBhBC,GApBWF,EAoBQD,EAAMC,KApBTC,GAoBc,IAAIE,MAAOC,YAnBnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAec,EAEjBP,EAAaS,GAAhCP,EAFoC,EAEpCA,KAAMC,EAF8B,EAE9BA,SAEd,OACE,gCACE,wCACA,sBAAKS,UAAS,yBAAoBH,GAAlC,UACE,mBAAGG,UAAS,UAAKT,EAAL,0BACZ,6BAAKD,IACL,mBAAGU,UAAS,UAAKT,EAAL,iCC9BL,SAASU,EAASP,GAC/B,OACE,qBAAKM,UAAU,4BAAf,SACE,qBAAKA,UAAU,iBAAf,SAAiCN,EAAMQ,YAK7CD,EAAQE,aAAe,CACrBD,QAAS,c,ICNUE,E,4MACnBC,MAAQ,CAAEV,IAAK,KAAMW,aAAc,I,uDAEnC,WAAsB,IAAD,OACnBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAEjB,IAAKgB,EAASE,OAAOC,cACnD,SAACC,GAAD,OAAS,EAAKH,SAAS,CAAEN,aAAcS,EAAIb,e,wBAI/C,WACE,OAAIc,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMV,IAClC,0CAAaqB,KAAKX,MAAMC,iBAG5BU,KAAKX,MAAMC,cAAgBU,KAAKX,MAAMV,IAClC,cAAC,EAAD,CAAeA,IAAKqB,KAAKX,MAAMV,MAGjC,cAACM,EAAD,CAASC,QAAQ,qC,oBAG1B,WACE,OACE,qBAAKF,UAAU,MAAf,SACGgB,KAAKC,mB,GAzBmBC,aCCjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2fcb10c9.chunk.js","sourcesContent":["import React from 'react'\nimport './SeasonDisplay.css'\n\nconst getSeason = (lat, month) => {\n  if (month > 2 && month < 9) {\n    return lat > 0 ? 'summer' : 'winter'\n  } else {\n    return lat < 0 ? 'winter' : 'summer'\n  }\n}\n\nconst seasonConfig = {\n  summer: {\n    text: 'Let\\'s go to the beach !',\n    iconName: 'sun'\n  },\n  winter: {\n    text: 'Burr, it is chilly !',\n    iconName: 'snowflake'\n  }\n}\n\nexport default function SeasonDisplay (props) {\n  const season = getSeason(props.lat, new Date().getMonth())\n  const { text, iconName } = seasonConfig[season]\n\n  return (\n    <div>\n      <h1>Season</h1>\n      <div className={`season-display ${season}`}>\n        <i className={`${iconName} icon-left huge icon`} />\n        <h3>{text}</h3>\n        <i className={`${iconName} icon-right huge icon`} />\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function Spinner (props) {\n  return (\n    <div className='ui active inverted dimmer'>\n      <div className='ui text loader'>{props.message}</div>\n    </div>\n  )\n}\n\nSpinner.defaultProps = {\n  message: 'Loading...'\n}\n","/* eslint-disable react/require-render-return */\nimport React, { Component } from 'react'\nimport SeasonDisplay from './components/SeasonDisplay'\nimport Spinner from './components/Spinner'\n\nexport default class App extends Component {\n  state = { lat: null, errorMessage: ''}\n\n  componentDidMount () {\n    window.navigator.geolocation.getCurrentPosition(\n      (position) => this.setState({ lat: position.coords.latitude }),\n      (err) => this.setState({ errorMessage: err.message })\n    )\n  }\n\n  appWrapper() {\n    if (this.state.errorMessage && !this.state.lat) {\n      return <h1>Error : {this.state.errorMessage}</h1>\n    }\n\n    if (!this.state.errorMessage && this.state.lat) {\n      return <SeasonDisplay lat={this.state.lat} />\n    }\n\n    return <Spinner message='Please accept location request'/>\n  }\n\n  render () {\n    return (\n      <div className='App'>\n        {this.appWrapper()}\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './App.css'\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}